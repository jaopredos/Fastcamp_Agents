#Importa√ß√£o das bibliotecas necess√°rias
from crewai import Crew
from trip_agents import TripAgents, StreamToExpander
from trip_tasks import TripTasks
import streamlit as st
import datetime
import sys

# Ignorar avisos de deprecia√ß√£o e avisos de usu√°rio
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=UserWarning)


# Configura√ß√£o da p√°gina
st.set_page_config(page_icon="‚úàÔ∏è", layout="wide")


def icon(emoji: str):
    """Shows an emoji as a Notion-style page icon."""
    st.write(
        f'<span style="font-size: 78px; line-height: 1">{emoji}</span>',
        unsafe_allow_html=True,
    )

#Defini√ß√£o da classe TripCrew, respons√°vel por criar a 'ideia' de uma viagem
class TripCrew:

    #Defini√ß√£o do m√©todo construtor da classe
    def __init__(self, origin, cities, date_range, interests):
        self.cities = cities
        self.origin = origin
        self.interests = interests
        self.date_range = date_range
        self.output_placeholder = st.empty()

    #Defini√ß√£o do m√©todo run, respons√°vel por executar a equipe de agentes
    #que ir√° planejar a viagem
    def run(self):
        #Puxa as classes TripAgents e TripTasks
        agents = TripAgents()
        tasks = TripTasks()

        #Cria√ß√£o dos agentes da tarefa
        city_selector_agent = agents.city_selection_agent()
        local_expert_agent = agents.local_expert()
        travel_concierge_agent = agents.travel_concierge()

        #Defini√ß√£o da tarefa de identifica√ß√£o
        identify_task = tasks.identify_task(
            city_selector_agent,
            self.origin,
            self.cities,
            self.interests,
            self.date_range
        )

        #Defini√ß√£o da tarefa de coleta de informa√ß√µes sobre a cidade
        gather_task = tasks.gather_task(
            local_expert_agent,
            self.origin,
            self.interests,
            self.date_range
        )

        #Defini√ß√£o da tarefa de planejamento da viagem
        plan_task = tasks.plan_task(
            travel_concierge_agent,
            self.origin,
            self.interests,
            self.date_range
        )

        #Cria√ß√£o da equipe de agentes
        crew = Crew(
            #Defini√ß√£o dos agentes
            agents=[
                city_selector_agent, local_expert_agent, travel_concierge_agent
            ],
            #Defini√ß√£o das tarefas
            tasks=[identify_task, gather_task, plan_task],
            #Par√¢metro que define se as mensagens sobre as 
            #a√ß√µes realizadas pelos agentes ser√£o exibidas
            verbose=True
        )

        #Execu√ß√£o da equipe de agentes
        result = crew.kickoff()
        #Salva o resultado da execu√ß√£o da equipe de agentes
        #nessa vari√°vel
        self.output_placeholder.markdown(result)

        #Retorna o resultado da execu√ß√£o da equipe de agentes
        return result


#Cria√ß√£o da UI da aplica√ß√£o
if __name__ == "__main__":

    #Defini√ß√£o do √≠cone da p√°gina
    icon("üèñÔ∏è VacAIgent")

    #Defini√ß√£o de um subt√≠tulo 
    st.subheader("Let AI agents plan your next vacation!",
                 divider="rainbow", anchor=False)

    import datetime

    #Defini√ß√£o da data atual para marcar a viagem
    today = datetime.datetime.now().date()
    #Defini√ß√£o da data de 10 de janeiro do pr√≥ximo ano como data
    #final para marcar a viagem (padr√£o)
    next_year = today.year + 1
    jan_16_next_year = datetime.date(next_year, 1, 10)
    
    #Defini√ß√£o de uma barra lateral
    with st.sidebar:
        st.header("üëá Enter your trip details")
        #Defini√ß√£o de um formul√°rio para coletar informa√ß√µes
        #sobre a viagem
        with st.form("my_form"):
            #Defini√ß√£o dos campos do formul√°rio
            #Campo para a localiza√ß√£o atual do usu√°rio
            location = st.text_input(
                "Where are you currently located?", placeholder="San Mateo, CA")
            #Campo para a cidade e pa√≠s que o usu√°rio deseja visitar
            cities = st.text_input(
                "City and country are you interested in vacationing at?", placeholder="Bali, Indonesia")
            #Campo para o intervalo de datas em que o usu√°rio deseja viajar
            date_range = st.date_input(
                "Date range you are interested in traveling?",
                min_value=today,
                value=(today, jan_16_next_year + datetime.timedelta(days=6)),
                format="MM/DD/YYYY",
            )
            #Campo para os interesses e hobbies do usu√°rio
            #ou detalhes extras sobre a viagem
            interests = st.text_area("High level interests and hobbies or extra details about your trip?",
                                     placeholder="2 adults who love swimming, dancing, hiking, and eating")

            #Bot√£o de envio do formul√°rio
            submitted = st.form_submit_button("Submit")

        st.divider()

        #Parte do c√≥digo que d√° cr√©ditos ao criador do projeto
        # Credits to joaomdmoura/CrewAI for the code: https://github.com/joaomdmoura/crewAI
        st.sidebar.markdown(
        """
        Credits to [**@joaomdmoura**](https://twitter.com/joaomdmoura)
        for creating **crewAI** üöÄ
        """,
            unsafe_allow_html=True
        )

        st.sidebar.info("Click the logo to visit GitHub repo", icon="üëá")
        st.sidebar.markdown(
            """
        <a href="https://github.com/joaomdmoura/crewAI" target="_blank">
            <img src="https://raw.githubusercontent.com/joaomdmoura/crewAI/main/docs/crewai_logo.png" alt="CrewAI Logo" style="width:100px;"/>
        </a>
        """,
            unsafe_allow_html=True
        )


#Verifica se o formul√°rio foi enviado
if submitted:
    #Cria√ß√£o de uma barra de status para mostrar o progresso
    with st.status("ü§ñ **Agents at work...**", state="running", expanded=True) as status:
        #Cria√ß√£o de um cont√™iner para mostrar o resultado
        with st.container(height=500, border=False):
            #Redireciona o print do console para o cont√™iner
            #da aplica√ß√£o
            sys.stdout = StreamToExpander(st)
            #Cria√ß√£o de uma inst√¢ncia da classe TripCrew
            #para planejar a viagem
            trip_crew = TripCrew(location, cities, date_range, interests)
            #Executa a fun√ß√£o respons√°vel por acionar os agentes
            #e planejar a viagem
            result = trip_crew.run()
        #Atualiza o status da barra de status
        status.update(label="‚úÖ Trip Plan Ready!",
                      state="complete", expanded=False)

    #Exibe o resultado da execu√ß√£o da equipe de agentes
    st.subheader("Here is your Trip Plan", anchor=False, divider="rainbow")
    st.markdown(result)
