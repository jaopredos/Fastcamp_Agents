#Importa칞칚o das bibliotecas necess치rias
import streamlit as st

from crewai import Crew, Process, Agent, Task
from langchain_core.callbacks import BaseCallbackHandler
from typing import TYPE_CHECKING, Any, Dict, Optional
from langchain_openai import ChatOpenAI

#Defini칞칚o do modelo de linguagem natural que ser치 utilizado
llm = ChatOpenAI()

#Defini칞칚o de imagens para os avatares dos agentes
avators = {"Writer":"https://cdn-icons-png.flaticon.com/512/320/320336.png",
            "Reviewer":"https://cdn-icons-png.freepik.com/512/9408/9408201.png"}


#Defini칞칚o da classe que ir치 tratar os callbacks
#ela exibe as intera칞칫es no chat
#e adiciona as mensagens na sess칚o
class MyCustomHandler(BaseCallbackHandler):

    #Defini칞칚o do construtor da classe
    def __init__(self, agent_name: str) -> None:
        self.agent_name = agent_name

    #Defini칞칚o da fun칞칚o que ser치 chamada quando a cadeia de execu칞칚o come칞ar
    def on_chain_start(
        self, serialized: Dict[str, Any], inputs: Dict[str, Any], **kwargs: Any
    ) -> None:
        #Adicionando a mensagem na sess칚o e exibindo no
        #chat, com o nome do Agente e o avatar correspondente
        st.session_state.messages.append({"role": "assistant", "content": inputs['input']})
        st.chat_message("assistant").write(inputs['input'])
    
    #Defini칞칚o da fun칞칚o que ser치 chamada quando a cadeia de execu칞칚o terminar
    def on_chain_end(self, outputs: Dict[str, Any], **kwargs: Any) -> None:
        #Adicionando a mensagem na sess칚o e exibindo no
        #chat, com o nome do Agente e o avatar correspondente
        st.session_state.messages.append({"role": self.agent_name, "content": outputs['output']})
        st.chat_message(self.agent_name, avatar=avators[self.agent_name]).write(outputs['output'])

#Defini칞칚o do Agente
writer = Agent(
    #Defini칞칚o da fun칞칚o do Agente
    role='Blog Post Writer',
    #Aqui 칠 definida a "identidade" do agente,
    #ou seja, o modo como ele ir치 agir
    backstory='''You are a blog post writer who is capable of writing a travel blog.
                      You generate one iteration of an article once at a time.
                      You never provide review comments.
                      You are open to reviewer's comments and willing to iterate its article based on these comments.
                      ''',
    #Defini칞칚o do objetivo do Agente
    goal="Write and iterate a decent blog post.",
    #Opcional definir as tools como lista vazia, pois j치
    #칠 o valor padr칚o
    # tools=[]  
    #Defini칞칚o do modelo de linguagem natural que o Agente ir치 utilizar
    llm=llm,
    #Defini칞칚o do callback que ser치 chamado quando a cadeia de execu칞칚o come칞
    callbacks=[MyCustomHandler("Writer")],
)

#Defini칞칚o do Agente
reviewer = Agent(
    #Defini칞칚o da fun칞칚o do Agente
    role='Blog Post Reviewer',
    #Aqui 칠 definida a "identidade" do agente,
    #ou seja, o modo como ele ir치 agir
    backstory='''You are a professional article reviewer and very helpful for improving articles.
                 You review articles and give change recommendations to make the article more aligned with user requests.
                 You will give review comments upon reading entire article, so you will not generate anything when the article is not completely delivered. 
                 You never generate blogs by itself.''',
    #Defini칞칚o do objetivo do Agente
    goal="list builtins about what need to be improved of a specific blog post. Do not give comments on a summary or abstract of an article",
    #Opcional definir as tools como lista vazia, pois j치
    #칠 o valor padr칚o
    # tools=[]  
    #Defini칞칚o do modelo de linguagem natural que o Agente ir치 utilizar
    llm=llm,
    #Defini칞칚o do callback que ser치 chamado quando a cadeia de execu칞칚o come칞ar e terminar
    callbacks=[MyCustomHandler("Reviewer")],
)

#Defini칞칚o do t칤tulo da p치gina
st.title("游눫 CrewAI Writing Studio") 

#Verificando se a sess칚o j치 foi iniciada,
#caso n칚o tenha sido, ser치 criada uma lista com uma mensagem inicial
if "messages" not in st.session_state:
    st.session_state["messages"] = [{"role": "assistant", "content": "What blog post do you want us to write?"}]

#Exibindo as mensagens
for msg in st.session_state.messages:
    st.chat_message(msg["role"]).write(msg["content"])

#Defini칞칚o do campo de entrada de texto
#para o usu치rio inserir o prompt
if prompt := st.chat_input():

    #Salva a mensagem na sess칚o e exibe no
    #chat, com o usu치rio e o que ele digitou
    st.session_state.messages.append({"role": "user", "content": prompt})
    st.chat_message("user").write(prompt)

    #Defini칞칚o da tarefa
    task1 = Task(
        #Defini칞칚o da descri칞칚o da tarefa
        description=f"""Write a blog post of {prompt}. """,
        #Defini칞칚o de quem ser치 o Agente respons치vel pela tarefa
        agent=writer,
        #Defini칞칚o da sa칤da esperada da tarefa
        expected_output="an article under 300 words."
    )

    #Defini칞칚o da tarefa
    task2 = Task(
        #Defini칞칚o da descri칞칚o da tarefa
        description="""list review comments for improvement from the entire content of blog post to make it more viral on social media""",
        #Defini칞칚o de quem ser치 o Agente respons치vel pela tarefa
        agent=reviewer,
        #Defini칞칚o da sa칤da esperada
        expected_output="Builtin points about where need to be improved."
    )

    #Defini칞칚o do Crew, a equipe que ir치 realizar as tarefas
    project_crew = Crew(
        #Defini칞칚o das tarefas que a equipe ir치 realizar
        tasks=[task1, task2], 
        #Defini칞칚o dos agentes que ir칚o compor a equipe 
        agents=[writer, reviewer],
        #Defini칞칚o do modelo de linguagem natural que a equipe ir치 utilizar
        manager_llm=llm,
        #Defini칞칚o do processo de execu칞칚o da equipe, nesse caso ser치 hier치rquico,
        #ou seja, o resultado da primeira tarefa ser치 a entrada da segunda tarefa
        process=Process.hierarchical  
    )
    #Dando in칤cio a execu칞칚o da equipe
    final = project_crew.kickoff()

    #Exibindo o resultado final
    result = f"## Here is the Final Result \n\n {final}"
    st.session_state.messages.append({"role": "assistant", "content": result})
    st.chat_message("assistant").write(result)