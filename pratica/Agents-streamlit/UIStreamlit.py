#Importa√ß√£o das bibliotecas necess√°rias
from crewai import Crew
from agents import TestAgents, StreamToExpander
from tasks import ActivityTasks
import re
import streamlit as st
import datetime
import sys
from dotenv import load_dotenv
import os

#Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

#Defini√ß√£o da chave da API do SerperDev e OpenAI
os.environ['SERPER_API_KEY'] = os.getenv('SERPER_DEV_API_KEY')
os.environ['OPENAI_API_KEY'] = os.getenv('OPENAI_API_KEY')

# Ignorar avisos de deprecia√ß√£o e avisos de usu√°rio
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=UserWarning)


#Defini√ß√£o da classe TripCrew, respons√°vel por criar a 'ideia' de uma viagem
class TripCrew:

    #Defini√ß√£o do m√©todo construtor da classe
    def __init__(self, subject):
        self.subject = subject
        self.output_placeholder = st.empty()

    #Defini√ß√£o do m√©todo run, respons√°vel por executar a equipe de agentes
    #que ir√° planejar a viagem
    def run(self):
        #Puxa as classes TripAgents e TripTasks
        agents = TestAgents()
        tasks = ActivityTasks()

        #Cria√ß√£o dos agentes da tarefa
        searcher_agent = agents.search_agent()
        teacher_agent = agents.teacher_agent()

        #Defini√ß√£o da tarefa de pesquisa e obten√ß√£o de informa√ß√µes
        search_task = tasks.search_task(
            self.subject,
            searcher_agent,
        )

        #Defini√ß√£o da tarefa de cria√ß√£o de quest√µes
        #Essa tarefa utiliza a informa√ß√£o obtida na tarefa de pesquisa
        question_task = tasks.question_task(
            teacher_agent,
        )

        #Cria√ß√£o da equipe de agentes
        crew = Crew(
            #Defini√ß√£o dos agentes
            agents=[
                searcher_agent,teacher_agent
            ],
            #Defini√ß√£o das tarefas
            tasks=[search_task, question_task],
            #Par√¢metro que define se as mensagens sobre as 
            #a√ß√µes realizadas pelos agentes ser√£o exibidas
            verbose=True
        )

        #Execu√ß√£o da equipe de agentes
        result = crew.kickoff()
        #Salva o resultado da execu√ß√£o da equipe de agentes
        #nessa vari√°vel
        self.output_placeholder.markdown(result)

        #Retorna o resultado da execu√ß√£o da equipe de agentes
        return result


#Cria√ß√£o da UI da aplica√ß√£o
if __name__ == "__main__":
    #Defini√ß√£o do t√≠tulo da aplica√ß√£o
    st.title("üß† AI Generator of Educational Questions")

    #Instru√ß√µes para o usu√°rio
    st.markdown("Insira abaixo o **tema** sobre o qual voc√™ deseja gerar quest√µes.", unsafe_allow_html=True)

    #Espa√ßo para o tema no centro da tela
    subject = st.text_area(
        "Tema das quest√µes:",
        placeholder="Ex: Revolu√ß√£o Francesa, C√°lculo diferencial, Fotoss√≠ntese...",
        height=150
    )

    #Defini√ß√£o do bot√£o para gerar as quest√µes
    submitted = st.button("Gerar quest√µes")

    #Verifica se o bot√£o foi pressionado e se o tema n√£o est√° vazio
    if submitted and subject.strip() != "":
        #Exibe o status de execu√ß√£o
        with st.status("ü§ñ **Agentes trabalhando...**", state="running", expanded=True) as status:
            #Container do Streamlit para a sa√≠da formatada
            with st.container(height=500, border=False):
                #Redireciona a sa√≠da para o app
                sys.stdout = StreamToExpander(st)
                #Cria√ß√£o e executa√ß√£o dos agentes
                trip_crew = TripCrew(subject)
                result = trip_crew.run()
            #Atualiza status para indicar que a execu√ß√£o foi conclu√≠da
            status.update(label="‚úÖ Quest√µes geradas com sucesso!", state="complete", expanded=False)

        #Mostra o resultado final
        st.subheader("üìù Quest√µes geradas", anchor=False, divider="rainbow")
        st.markdown(result)

    #Se o bot√£o foi pressionado e o tema est√° vazio, exibe um aviso
    elif submitted:
        st.warning("‚ö†Ô∏è Por favor, insira um tema antes de prosseguir.")
